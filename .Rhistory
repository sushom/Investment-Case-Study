df <- data.frame(set2, set3)
df <- cbind(data.frame(set1), df)
df
idx <- c(FALSE, FALSE, TRUE, FALSE)
df[idx, ]
x <- 20
y <- 1
x %% y
# Extract the 1st row from `MyList`
lapply(MyList,"[", 1, )
# Create a list of matrices
MyList <- list(A,B,C)
# Extract the 2nd column from `MyList` with the selection operator `[` with `lapply()`
......(MyList,"[", , 2)
# Extract the 1st row from `MyList`
lapply(MyList,"[", 1, )
# Create a list of matrices
MyList <- list(A,B,C)
a <- c(rnorm(100, 0, 1))
a
karan_dice <- c(3,1,5,7,6,1)
raj_dice <- c(6,1,3,4,6,1)
ajay_dice <- c(2,1,4,2,2,5)
dice_vector <- c(karan_dice, raj_dice, ajay_dice)
dice_matrix <- matrix(dice_vector, nrow = 3, byrow = TRUE)
dice_matrix
karan <- c(1, 4, 8, 6)
raj <- c(2, 4, 2, 7)
kiran <- c(6, 6, 8, 1)
dice.mat = matrix(karan, raj, kiran)
dice.mat
dice.mat = matrix(karan, raj, kiran, ncol = 3)
dice.mat = matrix(karan, raj, kiran, ncol = 3)
dice.mat = matrix(karan, raj, kiran, nrow = 4)
data.mat
dice.mat
dice.mat = matrix(karan, raj, kiran, nrow = 4, ncol=3)
dice.vector <- c(karan, raj, kiran)
dice.mat <- matrix(dice.vector, nrow = 4, ncol=3)
dice.mat
dice.mat <- matrix(dice.vector, nrow = 4)
dice.mat
dice.mat <- matrix(dice.vector, nrow = 4, byrow = T)
dice.mat
dice.mat <- matrix(dice.vector, nrow = 4, byrow = F)
dice.mat
dice.mat <- colnames('karan', 'raj', 'kiran')
colnames(dice.mat) <- c('karan', 'raj', 'kiran')
dice.mat
max(dice.mat[4,])
apply(dice.mat, 1, max)
apply(dice.mat, 2, max)
rownames(dice.mat) <- c('R1', 'R2', 'R3')
rownames(dice.mat) <- c('R1', 'R2', 'R3', 'R4')
apply(dice.mat, 2, max)
apply(dice.mat, 1, max)
apply(dice.mat, (1,2), max)
apply(dice.mat, [1,2], max)
apply(dice.mat, c(1,2), max)
apply(dice.mat, c(1,2), max)
x <- c(“I”, “eat”, “banana”)
lapply(x, nchar)
x <- c('I', 'eat', 'banana')
lapply(x, nchar)
tp <-  c("2", "3", "4")
typeof(tp)
tp <- as.numeric(tp)
tp
typeof(tp)
tp <-  c("2", "3", "4")
tp1 <-  c("2", "3", "4")
tp <-  c("2", "3", "4")
tp <- as.numeric(tp)
typeof(tp)
tp + tp1
?matrix
matrix(1:6, nrow = 2, byrow = T)
matrix(1:6, nrow = 2, byrow = F)
matrix(1:6, nrow = 2, bycol = F)
matrix(1:6, nrow = 2, byrow = F)
matrix(1:6, 2, ,FALSE)
matrix(1:6, 2, 3)
matrix(1:6, 3, 2)
?cbind
?paste()
paste('my', 'name')
mtcars
data.frame(sapply(mtcars,factor))
dtf <- data.frame(sapply(mtcars,factor))
summmary(dtf)
summary(dtf)
data.frame(sapply(my_df[ ,nrow(my_df)], factor))
data.frame(sapply(mtcars[ ,nrow(mtcars)], factor))
nrow(mtcars)
data.frame(sapply(mtcars[ ,ncol(mtcars)], factor))
sapply(mtcars[ ,ncol(mtcars)], factor)
mtcars[ ,ncol(mtcars)
mtcars[ ,ncol(mtcars)]
mtcars[ ,ncol(mtcars)]
mtcars[ ,ncol(mtcars)]
mtcars
view(mtcars)
view (mtcars)
View(dtf)
View(dtf)
View (mtcars)
mtcars[ ,ncol(mtcars)]
data.frame(sapply(mtcars[ ,1:nrow(mtcars)], factor))
sapply(mtcars[ ,1:nrow(mtcars)], factor)
nrow(mtcars)
mtcars[ ,1:nrow(mtcars)]
mtcars[ ,ncol(mtcars)]
mtcars[ ,1:nrow(mtcars)]
mtcars[ ,1:ncol(mtcars)]
data.frame(sapply(mtcars[ ,1:ncol(mtcars)], factor))
summary(dtf1)
dtf1 <- data.frame(sapply(mtcars[ ,1:ncol(mtcars)], factor))
summary(dtf1)
x <- 8
f <- function(){
y <- x + 2
return (c(x, y))
}
f()
y
x <- 8
f <- function(){
y <- 2
return (c(x, y))
}
y
m
y <- null
x <- 8
f <- function(){
m <- 2
return (c(x, m))
}
m
function_math <- function(x, y){
z <- x + y
p <- x * y
q <- z / p
return(c(z, p, q))
}
alpha <- function_math(2, 3)
alpha[2]
A <- c(5,4,1,3,8,1)
A <- c(5,4,1,3,8,1)
which(A===1)
which(A==1)
len(which(A==1))
length(which(A==1))
mtcars[2:3,]
mtcars[c(2,3),]
seq(2,3)
mtcars[seq(2,3),]
seq(2,3,1)
seq(2,3,1,4)
seq(2,20, 4)
mtcars[2:3,]
mtcars[c(2,3),]
mtcars[seq(2,3,1),]
mtcars[seq(2,3,1),]
for (i in 1:nrow(mtcars))
{
My_df[i, ] <- factor(mtcars[i, ])
}
for (i in 1:nrow(mtcars))
{
mtcars[i, ] <- factor(mtcars[i, ])
}
for (i in 1:nrow(mtcars))
{
mtcars[i, ] <- is.factor(mtcars[i, ])
}
?factor()
for (i in 1:nrow(mtcars))
{
mtcars[i, ] <- factor(mtcars[i, ])
}
for (i in 1:nrow(mtcars))
{
mtcars <- unlist(mtcars)
mtcars[i, ] <- factor(mtcars[i, ])
}
mtcars
mtcars <- list(mtcars)
for (i in 1:nrow(mtcars))
{
mtcars.unlist <- unlist(mtcars)
mtcars.unlist[i, ] <- factor(mtcars.unlist[i, ])
}
mtcars.unlist
mtcars.unlist <- unlist(mtcars)
mtcars.unlist
mtcars.unlist$mpg1
mtcars.unlist['mpg1']
mtcars.unlist['mpg20']
for (i in 1:nrow(mtcars))
{
mtcarsnew[i, ] <- factor(mtcars[i, ])
}
mtcars <- list(mtcars)
mtcars
mtcars <- data.frame(mtcars)
mtcars
mtcars
for (i in 1:nrow(mtcars))
{
mtcarsnew[i, ] <- factor(mtcars[i, ])
}
mtcars[[1]]
mtcars[[0]]
data.frame(sapply(mtcars, factor))
for (i in 1:ncol(mtcars)) { my_df[ ,i] <- factor(mtcars[ ,i]) }
my_df <- mtcars
for (i in 1:ncol(my_df)) { my_df[ ,i] <- factor(my_df[ ,i]) }
summary(my_def)
summary(my_df)
my_df <- mtcars
for (i in 1:ncol(my_df)) { my_df[i, ] <- factor(my_df[i, ]) }
my_df <- mtcars
for (i in 1:nrow(my_df)) { my_df[i, ] <- factor(my_df[i, ]) }
for (i in 1:nrow(my_df)) { my_df[ ,i] <- factor(my_df[ ,i]) }
setwd("D:\\Know4Fun\\Upgrad\\Investment Case Study")
#   ---------------------CheckPoint 1:---------------------------
#Loading the data in dataframes
companies <- read.delim("companies.txt", header = T, sep = "\t", stringsAsFactors = F)
rounds2 <- read.csv("rounds2.csv", stringsAsFactors = F)
rounds2$company_permalink <- toupper(rounds2$company_permalink)
companies$permalink <- toupper(companies$permalink)
names (rounds2)
names(companies)
#1. How many unique companies are present in the companies file?
nrow(distinct(companies, permalink))
nrow(sqldf("select distinct  permalink from companies"))
#2. How many unique companies are present in rounds2?
nrow(distinct(rounds2, company_permalink ))
nrow(sqldf("select distinct  company_permalink from rounds2"))
#3. In the companies data frame, which column can be used as the  unique key for each company? Write the name of the column.
# --> permalink
#4. Are there any companies in the rounds2 file which are not  present in companies ? Answer Y/N.
sqldf("select count(*) from rounds2 where company_permalink not in (select permalink from companies)")
#5. Merge the two data frames so that all variables (columns) in the companies frame are added to the rounds2 data frame.
#   Name the merged frame master_frame.How many observations are present in master_frame ?
master_frame <- merge(rounds2, companies, by.x = "company_permalink", by.y = "permalink" )
nrow(master_frame)
names(master_frame)
write.csv(master_frame, "master_frame.csv", na = 'NA')
#   ---------------------CheckPoint 2:---------------------------
dfGroup <- group_by(master_frame, funding_round_type)
arrange(summarise(dfGroup, avgFund = mean(raised_amount_usd, na.rm = T)), desc(avgFund))
#1.  Average funding amount of venture type: 11748949
#2.  Average funding amount of angel type: 958694
#3.  Average funding amount of seed type: 719818
#4.  Average funding amount of private_equity type: 73308593
#5. Considering that Spark Funds wants to invest between 5 to 15 million USD per investment round,
#   which investment type is the most suitable for it?
dfGroup2 <- group_by(master_frame, funding_round_type)
avgDf <- summarise(dfGroup2, avgFund = mean(raised_amount_usd, na.rm = T))
arrange(avgDf, desc(avgFund))
sqldf("select funding_round_type,  avg([raised_amount_usd]) as USD from master_frame group by funding_round_type order by USD desc")
#   ---------------------CheckPoint 3:---------------------------
#1. Spark Funds wants to see the top nine countries which have received the highest total funding
#   (across ALL sectors for the chosen investment type)
dfTop9 <- group_by(filter(master_frame, funding_round_type == 'post_ipo_debt'),  country_code)
top9  <- summarise(dfTop9, avgFund = mean(raised_amount_usd, na.rm = T))
top9 <- head(arrange(top9, desc(avgFund)),9)
#   ---------------------CheckPoint 4:Sector Analysis 1---------------------------
mapping <- read.csv("mapping.csv", stringsAsFactors = F)
myGatherMap <- gather(mapping, PrimarySector, myVal, 2:10)
myGatherMap <- myGatherMap[!(myGatherMap$myVal == 0),]
myGatherMap <- myGatherMap[,-ncol(myGatherMap)]
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
#write.csv(master_frame, "master_frameSplit.csv", na = 'NA')
master_frame <- separate(master_frame, category_list, into = c("PrimarySector","SecSector"),sep = "\\|")
master_frame <- master_frame[,-which(colnames(master_frame)=="SecSector")]
setwd("D:\\Know4Fun\\Upgrad\\Investment Case Study")
install.packages("sqldf")
install.packages("dplyr")
install.packages("tidyr")
install.packages("gdata")
install.packages("stringr")
install.packages("xlsx")
library(xlsx)
library(stringr)
library(gdata)
library(sqldf)
library(dplyr)
library(tidyr)
#   ---------------------CheckPoint 1:---------------------------
#Loading the data in dataframes
companies <- read.delim("companies.txt", header = T, sep = "\t", stringsAsFactors = F)
rounds2 <- read.csv("rounds2.csv", stringsAsFactors = F)
rounds2$company_permalink <- toupper(rounds2$company_permalink)
companies$permalink <- toupper(companies$permalink)
names (rounds2)
names(companies)
#1. How many unique companies are present in the companies file?
nrow(distinct(companies, permalink))
nrow(sqldf("select distinct  permalink from companies"))
#2. How many unique companies are present in rounds2?
nrow(distinct(rounds2, company_permalink ))
nrow(sqldf("select distinct  company_permalink from rounds2"))
#3. In the companies data frame, which column can be used as the  unique key for each company? Write the name of the column.
# --> permalink
#4. Are there any companies in the rounds2 file which are not  present in companies ? Answer Y/N.
sqldf("select count(*) from rounds2 where company_permalink not in (select permalink from companies)")
#5. Merge the two data frames so that all variables (columns) in the companies frame are added to the rounds2 data frame.
#   Name the merged frame master_frame.How many observations are present in master_frame ?
master_frame <- merge(rounds2, companies, by.x = "company_permalink", by.y = "permalink" )
nrow(master_frame)
names(master_frame)
write.csv(master_frame, "master_frame.csv", na = 'NA')
#   ---------------------CheckPoint 2:---------------------------
dfGroup <- group_by(master_frame, funding_round_type)
arrange(summarise(dfGroup, avgFund = mean(raised_amount_usd, na.rm = T)), desc(avgFund))
#1.  Average funding amount of venture type: 11748949
#2.  Average funding amount of angel type: 958694
#3.  Average funding amount of seed type: 719818
#4.  Average funding amount of private_equity type: 73308593
#5. Considering that Spark Funds wants to invest between 5 to 15 million USD per investment round,
#   which investment type is the most suitable for it?
dfGroup2 <- group_by(master_frame, funding_round_type)
avgDf <- summarise(dfGroup2, avgFund = mean(raised_amount_usd, na.rm = T))
arrange(avgDf, desc(avgFund))
sqldf("select funding_round_type,  avg([raised_amount_usd]) as USD from master_frame group by funding_round_type order by USD desc")
#   ---------------------CheckPoint 3:---------------------------
#1. Spark Funds wants to see the top nine countries which have received the highest total funding
#   (across ALL sectors for the chosen investment type)
dfTop9 <- group_by(filter(master_frame, funding_round_type == 'post_ipo_debt'),  country_code)
top9  <- summarise(dfTop9, avgFund = mean(raised_amount_usd, na.rm = T))
top9 <- head(arrange(top9, desc(avgFund)),9)
#   ---------------------CheckPoint 4:Sector Analysis 1---------------------------
mapping <- read.csv("mapping.csv", stringsAsFactors = F)
myGatherMap <- gather(mapping, PrimarySector, myVal, 2:10)
myGatherMap <- myGatherMap[!(myGatherMap$myVal == 0),]
myGatherMap <- myGatherMap[,-ncol(myGatherMap)]
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
#write.csv(master_frame, "master_frameSplit.csv", na = 'NA')
master_frame <- separate(master_frame, category_list, into = c("PrimarySector","SecSector"),sep = "\\|")
master_frame <- master_frame[,-which(colnames(master_frame)=="SecSector")]
trial_frame <- merge(master_frame, myGatherMap, by = "PrimarySector")
View(trial_frame)
myGatherMap
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
write.csv(myGatherMap, "myGatherMap.csv", na = 'NA')
write.csv(trial_frame, "trial_frame.csv", na = 'NA')
write.csv(master_frame, "master_frame_new.csv", na = 'NA')
trial_frame <- master_frame
names(trial_frame)
trial_frame[9]
colnames(trial_frame[9])
colnames(trial_frame[9]) <- "category_list"
colnames(trial_frame[9])
names(trial_frame)
names(trial_frame)[2]
names(trial_frame)[names(trial_frame) == "PrimarySector"]
names(trial_frame)[names(trial_frame) == "PrimarySector"] <- "category_list"
names(trial_frame)
trial_frame <- merge(master_frame, myGatherMap, by = "category_list")
names(myGatherMap)
trial_frame <- merge(master_frame, myGatherMap, by.x =  "category_list", by.y =  "category_list")
trial_frame <- merge(trial_frame, myGatherMap, by =  "category_list")
write.csv(trial_frame, "trial_frame.csv", na = 'NA')
write.csv(trial_frame, "trial_frame.csv", na = 'NA')
colnames(master_frame)
master_frame <- master_frame[,-which(colnames(master_frame)=="SecSector")]
names(master_frame)[names(master_frame) == "PrimarySector"] <- "category_list"
master_frame <- merge(master_frame, myGatherMap, by =  "category_list")
colnames(master_frame)
names(master_frame)[names(master_frame) == "PrimarySector"] <- "category_list"
master_frame <- merge(master_frame, myGatherMap, by =  "category_list")
colnames(master_frame)
master_frame
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
master_frame <- trial_frame
colnames(master_frame)
master_frame <- master_frame[, c(2:15,1,2)]
colnames(master_frame)
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
master_frame <- trial_frame
#To remove Vertical bar from Category List
#master_frame$category_list <- unlist(strsplit(master_frame$category_list, "\\|"))[1]
master_frame <- trial_frame
colnames(master_frame)
master_frame <- master_frame[, c(2:15,1,16)]
colnames(master_frame)
# Loading and Cleaning Data
companies <- read.delim("companies.txt", header = TRUE, stringsAsFactors = FALSE)
str(companies)
names(companies)
rounds2 <- read.csv("rounds2.csv", stringsAsFactors = FALSE)
str(rounds2)
names(rounds2)
# Converting the unique ID of company permalink in both data frames to lower case as R is case sensitive
companies$permalink <- tolower(companies$permalink)     #-----------Changed By Sushom
rounds2$company_permalink <- tolower(rounds2$company_permalink)
#renaming the permalink column to company_permalink in companies data frame to enable simple merging
names(companies)[1] <- "company_permalink"
names(companies)
#Checkpoint 1: Data Cleaning 1
## Table 1.1 - Understanding the dataset
### 1. How many unique companies are present in the companies file?
count(distinct(companies, permalink))
### 2. How many unique companies are present in the rounds file?
count(distinct(rounds2, company_permalink))
### 4. Are there any companies in the rounds2 file which are not present in companies ?
sum(!is.element(rounds2$company_permalink, companies$company_permalink))
### 5. Merge the two data frames so that all variables (columns) in the companies frame are added to the rounds2 data frame.
###    Name the merged frame master_frame.
###   How many observations are present in master_frame
master_frame <- merge(rounds2, companies, by = "company_permalink")
names(master_frame)
#Checkpoint 2: Funding Type Analysis
## Table 2.1 - Average Values of Investments for Each of Funding Types
### Using "group_by" function for Grouping the master_frame based in funding type
funding_type <- group_by(master_frame, funding_round_type)
### Using "summarise" function for calculating the fund wise average fund invested
funding_type_average <- summarise(funding_type, avg_fund = mean(raised_amount_usd, na.rm = TRUE))
### Using "arrange" function to sort the fund wise investments in decreasing order
arrange(funding_type_average, desc(avg_fund))
# Checkpoint 3: Country Analysis
# It is mentioned that Spark Industries want to invest in only English speaking countries (list given as link in assingment)
# As per the list downloaded the short code of english speaking countries from https://wits.worldbank.org/wits/wits/witshelp/Content/Codes/Country_Codes.htm
# Prepared a new CSV file called "countries.csv" with two columns country and country_code and loaded to data frame "eng_countries"
eng_countries <- read.csv("countries.csv", stringsAsFactors = FALSE)
str(eng_countries)
# Created a new master frame by filtering master_frame with only english speaking countries and funding type "Venture"
master_frame <- filter(master_frame, tolower(funding_round_type) == "venture", tolower(country_code) %in% tolower(eng_countries$Country_Code))
## Table 3.1 - Analysing the Top 3 English-Speaking Countries
### Using "group_by" function for Grouping the master_frame1 based on english speaking country code
country_grouping <- group_by(master_frame1, country_code)
### Using "summarise" function for calculating the country wise total fund invested
country_grouping_sum <- summarise(country_grouping, total_fund = sum(raised_amount_usd, na.rm = TRUE))
### Using "arrange" function to sort the country wise investments in
top9 <- head(arrange(country_grouping_sum, desc(total_fund)),9)
top9
# Checkpoint 4: Sector Analysis 1
# Loading "mapping.csv" and converting the same from wide to long format using "gather" function
mapping <- read.csv("mapping.csv", stringsAsFactors = FALSE)
names(mapping)
mapping <- gather(mapping, main_sector, val, 2:10)
mapping <- mapping[!(mapping$val==0),]
mapping <- mapping[,-3]
#Correcting the category_list of mapping as "na" is replaced with "0"
mapping$category_list <- gsub("0", "na", mapping$category_list)
mapping$category_list <- gsub("2.na", "2.0", mapping$category_list)
#As the category_list contain values separated by "|", creating primary sector by using "separate" function
master_frame <- separate(master_frame, category_list, into=c("primary_sector", "sec_sector"), sep="\\|")
master_frame <- select(master_frame, -sec_sector)
#Renaming "category_list" to "primary_sector" in mapping dataframe for easy merger
names(mapping)[1] <- "primary_sector"
#Merged data frame with each primary sector mapped to its main sector
master_frame <- merge(master_frame, mapping, by = "primary_sector")
#Checkpoint 1: Data Cleaning 1
## Table 1.1 - Understanding the dataset
### 1. How many unique companies are present in the companies file?
count(distinct(companies, permalink))
### 4. Are there any companies in the rounds2 file which are not present in companies ?
sum(!is.element(rounds2$company_permalink, companies$company_permalink))
### Using "arrange" function to sort the fund wise investments in decreasing order
arrange(funding_type_average, desc(avg_fund))
str(eng_countries)
# Checkpoint 3: Country Analysis
# It is mentioned that Spark Industries want to invest in only English speaking countries (list given as link in assingment)
# As per the list downloaded the short code of english speaking countries from https://wits.worldbank.org/wits/wits/witshelp/Content/Codes/Country_Codes.htm
# Prepared a new CSV file called "countries.csv" with two columns country and country_code and loaded to data frame "eng_countries"
eng_countries <- read.csv("countries.csv", stringsAsFactors = FALSE)
str(eng_countries)
# Created a new master frame by filtering master_frame with only english speaking countries and funding type "Venture"
master_frame <- filter(master_frame, tolower(funding_round_type) == "venture", tolower(country_code) %in% tolower(eng_countries$Country_Code))
### Using "group_by" function for Grouping the master_frame1 based on english speaking country code
country_grouping <- group_by(master_frame1, country_code)
### Using "group_by" function for Grouping the master_frame1 based on english speaking country code
country_grouping <- group_by(master_frame, country_code) #----- Modified by Sushom
### Using "summarise" function for calculating the country wise total fund invested
country_grouping_sum <- summarise(country_grouping, total_fund = sum(raised_amount_usd, na.rm = TRUE))
country_grouping_sum
### Using "arrange" function to sort the fund wise investments in decreasing order
arrange(funding_type_average, desc(avg_fund))
dfTop9 <- group_by(filter(master_frame, funding_round_type == 'venture'),  country_code)
top9  <- summarise(dfTop9, avgFund = mean(raised_amount_usd, na.rm = T))
top9 <- head(arrange(top9, desc(avgFund)),9)
View(top9)
eng_countries <- read.csv("coutries.csv")
eng_countries <- read.csv("countries.csv")
eng_countries <- read.csv("countries.csv", stringsAsFactors = FALSE)
#   ---------------------CheckPoint 3:---------------------------
#1. Spark Funds wants to see the top nine countries which have received the highest total funding
#   (across ALL sectors for the chosen investment type)
dfTop9 <- group_by(filter(master_frame, funding_round_type == 'venture', tolower(master_frame$country_code) %in% tolower(eng_countries$Country_Code)),  country_code)
top9  <- summarise(dfTop9, avgFund = mean(raised_amount_usd, na.rm = T))
top9 <- head(arrange(top9, desc(avgFund)),9)
View(top9)
View(eng_countries)
gsub("0", "na", mapping$category_list)
mapping <- read.csv("mapping.csv", stringsAsFactors = FALSE)
names(mapping)
mapping <- gather(mapping, main_sector, val, 2:10)
mapping <- mapping[!(mapping$val==0),]
mapping <- mapping[,-3]
mapping
gsub("0", "na", mapping$category_list)
gsub("2.na", "2.0", mapping$category_list)
names(mapping)
